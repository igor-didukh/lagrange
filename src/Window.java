
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Filter for file open dialog (text files only)
 */
class MyCustomFilter extends javax.swing.filechooser.FileFilter {
    @Override
    public boolean accept(File file) {
        // Allow only directories, or files with ".txt" extension
        return file.isDirectory() || file.getAbsolutePath().endsWith(".txt");
    }
    @Override
    public String getDescription() {
        // This description will be displayed in the dialog
        return "Text documents (*.txt)";
    }
}

/**
 * Filter of user input in text filds
 */
class MyDocumentFilter extends DocumentFilter {
    private final String bannedSymbols = "[^0123456789.-]";
    
    @Override
    public void insertString(FilterBypass fb, int offset, String string, AttributeSet attr) throws BadLocationException {
        string = string.replaceAll(bannedSymbols, "");
        super.insertString(fb, offset, string, attr);
    }

    @Override
    public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
        text = text.replaceAll(bannedSymbols, "");
        super.replace(fb, offset, length, text, attrs);
    }
}

/**
 * Storage to save one series with its drowing settings
 */
class SeriesWithSettings {
    XYSeries series;
    boolean shapesVisible;
    boolean linesVisible;
    Color color;
    
    public SeriesWithSettings(XYSeries series, boolean shapesVisible, boolean linesVisible, Color color) {
        this.series = series;    
        this.shapesVisible = shapesVisible;
        this.linesVisible = linesVisible;
        this.color = color;
    }
}

public class Window extends javax.swing.JFrame {
    final int POINTS = 100;                                                 // Number of points to draw
    Functions[] functions;                                                  // Array of all functions
    ArrayList<SeriesWithSettings> seriesWithSettings = new ArrayList<>();   // Collection of series with their drawing settings
    XYSeries nodes;                                                         // Series of interpolation nodes
    double left, right;                                                     // Bounds of interval
    double h;                                                               // Distance between neighbor nodes

    /**
     * Create new form Window
     */
    public Window() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        buttonSource = new javax.swing.ButtonGroup();
        fileLoad = new javax.swing.JFileChooser();
        panelTitle = new javax.swing.JPanel();
        labelTitle = new javax.swing.JLabel();
        panelSource = new javax.swing.JPanel();
        labelLBound = new javax.swing.JLabel();
        editLBound = new javax.swing.JTextField();
        labelRBound = new javax.swing.JLabel();
        editRBound = new javax.swing.JTextField();
        labelNodes = new javax.swing.JLabel();
        sliderDegree = new javax.swing.JSlider();
        editNodes = new javax.swing.JTextField();
        labelSource = new javax.swing.JLabel();
        radioFunction = new javax.swing.JRadioButton();
        comboFunction = new javax.swing.JComboBox<>();
        radioTable = new javax.swing.JRadioButton();
        btnTableFromFile = new javax.swing.JButton();
        scrollTable = new javax.swing.JScrollPane();
        tableNodes = new javax.swing.JTable();
        btnInterpolate = new javax.swing.JButton();
        panelInfo = new javax.swing.JPanel();
        scrollInfo = new javax.swing.JScrollPane();
        textInfo = new javax.swing.JTextArea();
        panelGraphic = new javax.swing.JPanel();

        fileLoad.setDialogTitle("Select source file");
        fileLoad.setFileFilter(new MyCustomFilter());
        fileLoad.setSelectedFile(new java.io.File("D:\\Delo\\NetBeans\\04 Lagrange\\test\\coefs.txt"));

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Interpolation");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        labelTitle.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        labelTitle.setForeground(new java.awt.Color(0, 0, 204));
        labelTitle.setText("Interpolation of function by Lagrange polynom  ");

        javax.swing.GroupLayout panelTitleLayout = new javax.swing.GroupLayout(panelTitle);
        panelTitle.setLayout(panelTitleLayout);
        panelTitleLayout.setHorizontalGroup(
            panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitle)
                .addContainerGap(57, Short.MAX_VALUE))
        );
        panelTitleLayout.setVerticalGroup(
            panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelSource.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Data for interpolation: ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12), new java.awt.Color(0, 0, 102))); // NOI18N

        labelLBound.setText("Interval from:");

        editLBound.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        editLBound.setText("0");
        editLBound.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                editLBoundFocusLost(evt);
            }
        });
        editLBound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editLBoundActionPerformed(evt);
            }
        });

        labelRBound.setText("to:");

        editRBound.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        editRBound.setText("20");
        editRBound.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                editRBoundFocusLost(evt);
            }
        });
        editRBound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRBoundActionPerformed(evt);
            }
        });

        labelNodes.setText("Polynom degree:");

        sliderDegree.setMajorTickSpacing(3);
        sliderDegree.setMaximum(14);
        sliderDegree.setMinimum(2);
        sliderDegree.setMinorTickSpacing(1);
        sliderDegree.setPaintLabels(true);
        sliderDegree.setPaintTicks(true);
        sliderDegree.setSnapToTicks(true);
        sliderDegree.setValue(2);
        sliderDegree.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderDegreeStateChanged(evt);
            }
        });

        editNodes.setEditable(false);
        editNodes.setBackground(new java.awt.Color(255, 255, 255));
        editNodes.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, sliderDegree, org.jdesktop.beansbinding.ELProperty.create("${value}"), editNodes, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        labelSource.setText("Source:");

        buttonSource.add(radioFunction);
        radioFunction.setSelected(true);
        radioFunction.setText("function");
        radioFunction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioFunctionActionPerformed(evt);
            }
        });

        buttonSource.add(radioTable);
        radioTable.setText("table");
        radioTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioTableActionPerformed(evt);
            }
        });

        btnTableFromFile.setText("from file...");
        btnTableFromFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTableFromFileActionPerformed(evt);
            }
        });

        scrollTable.setToolTipText("");

        tableNodes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableNodes.setGridColor(new java.awt.Color(204, 204, 204));
        scrollTable.setViewportView(tableNodes);

        btnInterpolate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnInterpolate.setForeground(new java.awt.Color(0, 0, 102));
        btnInterpolate.setText("Interpolate");
        btnInterpolate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInterpolateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSourceLayout = new javax.swing.GroupLayout(panelSource);
        panelSource.setLayout(panelSourceLayout);
        panelSourceLayout.setHorizontalGroup(
            panelSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSourceLayout.createSequentialGroup()
                .addGroup(panelSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelSourceLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(btnInterpolate))
                    .addGroup(panelSourceLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(comboFunction, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSourceLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(labelSource)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(radioFunction)
                        .addGap(31, 31, 31)))
                .addGroup(panelSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSourceLayout.createSequentialGroup()
                        .addGap(0, 14, Short.MAX_VALUE)
                        .addComponent(radioTable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnTableFromFile, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrollTable, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSourceLayout.createSequentialGroup()
                .addGroup(panelSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelSourceLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(sliderDegree, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelSourceLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelSourceLayout.createSequentialGroup()
                                .addComponent(labelLBound)
                                .addGap(23, 23, 23)
                                .addComponent(editLBound, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelRBound))
                            .addGroup(panelSourceLayout.createSequentialGroup()
                                .addComponent(labelNodes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editNodes, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addComponent(editRBound, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)))
                .addGap(27, 27, 27))
        );

        panelSourceLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {editLBound, editRBound});

        panelSourceLayout.setVerticalGroup(
            panelSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSourceLayout.createSequentialGroup()
                .addGroup(panelSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelRBound)
                    .addComponent(labelLBound, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editLBound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editRBound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNodes)
                    .addComponent(editNodes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(sliderDegree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioFunction, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radioTable, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTableFromFile)
                    .addComponent(labelSource))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(panelSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSourceLayout.createSequentialGroup()
                        .addComponent(comboFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(btnInterpolate, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrollTable, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Information: ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12), new java.awt.Color(0, 0, 102))); // NOI18N

        textInfo.setColumns(20);
        textInfo.setFont(new java.awt.Font("Consolas", 0, 11)); // NOI18N
        textInfo.setRows(5);
        scrollInfo.setViewportView(textInfo);

        javax.swing.GroupLayout panelInfoLayout = new javax.swing.GroupLayout(panelInfo);
        panelInfo.setLayout(panelInfoLayout);
        panelInfoLayout.setHorizontalGroup(
            panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelInfoLayout.setVerticalGroup(
            panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelInfoLayout.createSequentialGroup()
                .addComponent(scrollInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelGraphic.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Graphics: ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12), new java.awt.Color(0, 0, 102))); // NOI18N

        javax.swing.GroupLayout panelGraphicLayout = new javax.swing.GroupLayout(panelGraphic);
        panelGraphic.setLayout(panelGraphicLayout);
        panelGraphicLayout.setHorizontalGroup(
            panelGraphicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 478, Short.MAX_VALUE)
        );
        panelGraphicLayout.setVerticalGroup(
            panelGraphicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 583, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelGraphic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(116, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {panelInfo, panelSource});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(panelGraphic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Calc equally spaced values within the interval [left, right]
     * @param count - number of points to split (including bounds of interval)
     */
    private double[] splitInterval(int count) {
        double[] x = new double[count];
        double step = (right - left) / (count - 1);
        x[0] = left;
        
        for (int i=1; i < count; i++)
            x[i] = x[i-1] + step;
        
        return x;
    }
    
    /**
     * Create every series
     * @param func - function to which the series is created
     * @param seriesName - func.getName is unsuitable, becuase for source function two series are created (one - for draw & second - nodes)
     * @param count - number of points to use in series
     */
    private XYSeries createSeries(Functions func, String seriesName, int count) {
        XYSeries series = new XYSeries(seriesName);
        double[] x = splitInterval(count);
        
        series.add( x[0], func.f(x[0]) );
        for (int i=1; i < count; i++)
            series.add( x[i], func.f(x[i]) );
        
        return series;
    }
    
    /**
     * Draw all series    
    */
    private void draw() {
        XYSeriesCollection dataset = new XYSeriesCollection();
        XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
        int degree = sliderDegree.getValue();

        for (int i = 0; i < seriesWithSettings.size(); i++) {
            SeriesWithSettings sp = seriesWithSettings.get(i);
            
            dataset.addSeries(sp.series);
    
            renderer.setSeriesLinesVisible(i, sp.linesVisible);
            renderer.setSeriesShapesVisible(i, sp.shapesVisible);
            renderer.setSeriesPaint(i, sp.color);    
        }
        
        String name, title;
        if (radioFunction.isSelected()) {
            name = functions[comboFunction.getSelectedIndex()].getName();
            title = String.format( "Interpolation of function f(x) = %s\n(polynom degree = %d)", name, degree );
        }
        else {
            name = "Y";
            title = String.format( "Interpolation on points from table\n(polynom degree = %d)", degree );
        }

        JFreeChart jFreeChart = ChartFactory.createXYLineChart("", "x", name, dataset, PlotOrientation.VERTICAL, true, false, false);
        
        TextTitle tt = new TextTitle(title, new Font("Arial", Font.PLAIN, 18));
        jFreeChart.setTitle(tt);
        
        XYPlot xyPlot = (XYPlot) jFreeChart.getPlot();
        xyPlot.setDomainCrosshairVisible(true);
        xyPlot.setRangeCrosshairVisible(true);
        xyPlot.setRenderer(renderer);
        
        ChartPanel CP = new ChartPanel(jFreeChart);

        this.panelGraphic.setLayout(new java.awt.BorderLayout());
        this.panelGraphic.add(CP, BorderLayout.CENTER);
        this.panelGraphic.validate();
        this.panelGraphic.setVisible(true);
    }

    /**
     * Create function calculating Lagrange polynom (using interface 'Functions')
     */
    /*private Functions createLagrangePolynom() {
        Functions poly = new Functions() {
            @Override
            public String getName() {
                return "Lagrange polynom";
            }

            @Override
            public double f(double x) {
                double result = 0;
                int nodesCount = nodes.getItemCount();
                
                for (int k = 0; k < nodesCount; k++)
                {
                    double P = 1;
                    double xk = (double) nodes.getX(k);
                    double yk = (double) nodes.getY(k);
                    
                    for (int j = 0; j < nodesCount; j++) {
                        double xj = (double) nodes.getX(j);
                        if (j != k)
                            P *= (x - xj) / (xk - xj);
                    }

                    result += yk * P;
                }	
                return result;
            }
        };
        return poly;
    }*/
    
    /**
     * Create function calculating Lagrange polynom (using interface 'Functions')
     * for equally spaced values within the interval [left, right]
     */
    private Functions createLagrangePolynom() {
        Functions poly = new Functions() {
            @Override
            public String getName() {
                return "Lagrange polynom";
            }

            @Override
            public double f(double x) {
                double result = 0;
                double t = (x - left) / h;
                int nodesCount = nodes.getItemCount();
                
                for (int k = 0; k < nodesCount; k++)
                {
                    double lj = 1;
                    for (int j = 0; j < nodesCount; j++) {
                        if (j != k)
                            lj *= (t - j) / (k - j);
                    }
                    
                    double yk = (double) nodes.getY(k);
                    result += yk * lj;
                }	
                return result;
            }
        };
        return poly;
    }
    
    /**
     * Print nodes coordinates
     */
    private void printNodes() {
        textInfo.append("Interpolation nodes:\n"); 
        for (int i = 0; i < nodes.getItemCount(); i++) {
            double x = (double) nodes.getX(i);
            double y = (double) nodes.getY(i);
            
            String str = String.format("Node #%3d: x = %8.4f; y = %8.4f", i+1, x, y);
            textInfo.append(str + "\n"); 
        }
    }
    
    /**
     * Transfer values from table to series of nodes
     */
    private XYSeries getNodesFromTable() {
        XYSeries series = new XYSeries("nodes");
        
        for (int i = 0; i < sliderDegree.getValue()+1; i++) {
            double x = (double) tableNodes.getValueAt(i,1);
            double y;
            try {
                y = (double) tableNodes.getValueAt(i,2);    
            } catch (Exception e) {
                y = 0;    // if blank value found
            }
            series.add(x,y); 
        }
        return series;
    }
    
    /**
     * Interpolate
     */
    private void doInterpolate() {
        panelGraphic.removeAll();
        panelGraphic.repaint();
        textInfo.setText("");
        seriesWithSettings.clear();
        
        if (radioFunction.isSelected()) {                                                               
            Functions sourceFunction = functions[comboFunction.getSelectedIndex()];                     // Get source function
            XYSeries seriesFunction = createSeries(sourceFunction, sourceFunction.getName(), POINTS);   // Create series to plot the source function
            seriesWithSettings.add( new SeriesWithSettings(seriesFunction, false, true, Color.red) );   // Save series (function) to further drawing
            nodes = createSeries( sourceFunction, "nodes", sliderDegree.getValue()+1 );                 // Create series to plot nodes from the source function
        } else
            nodes = getNodesFromTable();                                                                // Create series to plot nodes from table
        
        seriesWithSettings.add( new SeriesWithSettings(nodes, true, false, Color.blue) );               // Save series (nodes) to further drawing
        
        Functions polynom = createLagrangePolynom();                                                    // Create Lagrange polynom
        XYSeries seriesPolynom = createSeries(polynom, polynom.getName(), POINTS);                      // Create series to plot Lagrange polynom
        seriesWithSettings.add( new SeriesWithSettings(seriesPolynom, false, true, Color.black) );      // Save series (polynom) to further drawing
        
        draw();
        printNodes();
    }
    
    /**
     * Load values into column 'Y' of table from text file
     */
    private void loadCoefsFromFile() {
        if (fileLoad.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) return;
            
        File file = fileLoad.getSelectedFile();
        
        try {
            FileReader fileReader = new FileReader( file.getAbsolutePath() );
            textInfo.read( fileReader, null );
            
            String[] textLines = textInfo.getText().split("\n");
            if (textLines.length > 0) {
                // First line only
                String textLine = textLines[0].trim().replaceAll("( |\t|;)+", " ");
                String[] coefs  = textLine.split(" ");
                int cols = Math.min(sliderDegree.getValue()+1, coefs.length);
                for (int i = 0; i < cols; i++) {
                    try {
                        double y = Double.parseDouble( coefs[i].trim() );
                        tableNodes.setValueAt(y,i,2);
                    } catch (Exception ex){}
                }
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Problem accessing file:\n" + file.getAbsolutePath(), "Error opening file!", ERROR_MESSAGE);
        }
    }
    
    /**
     * Fill column 'X' of table with equally spaced values within the interval [left, right]
     */
    private void setColumnX() {
        int nodesCount = sliderDegree.getValue()+1;
        double[] x = splitInterval(nodesCount);
        for (int i = 0; i < nodesCount; i++)
            tableNodes.setValueAt(x[i], i, 1);
    } 
    
    /**
     * Define new dimention of table
     */
    private void redefineTable() {
        Object[] headers = {"#", "X", "Y"};
        
        int nodesCount = sliderDegree.getValue()+1;
        Object[][] data = new Double [nodesCount][3];
        
        for (int i = 0; i < nodesCount; i++) {
            data[i][0] = (double) i+1;
            data[i][1] = 0.0;
            data[i][2] = 0.0;
        }
        
        DefaultTableModel newModel = new DefaultTableModel(data, headers) {
            @Override
            public Class getColumnClass(int columnIndex) {
                return java.lang.Double.class;
            }
            
            @Override
            public boolean isCellEditable ( int row, int column ) {
                return column == 2; // user can edit only cells from row 'Y'
            }
        };
        tableNodes.setModel(newModel);
        
        // Alignment in header
        JTableHeader th = tableNodes.getTableHeader();
        DefaultTableCellRenderer r = (DefaultTableCellRenderer) th.getDefaultRenderer();
        r.setHorizontalAlignment(JLabel.CENTER);
        r.setVerticalAlignment(JLabel.TOP);
        th.setDefaultRenderer(r);
    }
    
    /**
     * Set form components availability depending on the radio buttons values 
     */
    private void radioChanged() {
        comboFunction.setEnabled(!radioTable.isSelected());
        tableNodes.setEnabled(radioTable.isSelected());
        btnTableFromFile.setEnabled(radioTable.isSelected());
        
        if (radioTable.isSelected()) {
            redefineTable();
            setColumnX();
        }
    }
    
    /**
     * Calc the distance between neighbor nodes
     */
    private void calcDistance() {
        h = (right - left) / (sliderDegree.getValue());
    }
    
    /**
     * Get values of bounds with their check
     */
    private boolean getLeftRight() {
        boolean res = false;
        try {
            double l = Double.parseDouble(editLBound.getText());
            double r = Double.parseDouble(editRBound.getText());
            if (l < r) {
                res = true;
                left = l;
                right = r;    
                calcDistance();
            }
        } catch (NumberFormatException e) {}
        return res;    
    }
    
    /**
     * Check text field value.
     * If valid and table radio button is selected - 
     *    fill 'X' column of table with equally spaced values within the interval [left, right],
     * otherwise - restore old value
     */
    private void checkTextField(JTextField field, double value) {
        if ( getLeftRight() ) {
            if ( radioTable.isSelected() ) setColumnX();
        } else field.setText("" + value);
    }
    
    /**
     * Initial actions
     */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        final int functionsCount = 4;
        
        // Fill array of the functions
        functions = new Functions[functionsCount];
        functions[0] = new f1();
        functions[1] = new f2();
        functions[2] = new f3();
        functions[3] = new f4();
        
        // Form combo box from the names of the functions
        String[] comboList = new String[functionsCount];
        for (int i = 0; i < functionsCount; i++) 
            comboList[i] = "f(x) = " + functions[i].getName();
        comboFunction.setModel(new DefaultComboBoxModel<>(comboList));
        comboFunction.setSelectedIndex(3);
        // ===
        
        // Set filter to text fields
        ((AbstractDocument) editLBound.getDocument()).setDocumentFilter(new MyDocumentFilter());
        ((AbstractDocument) editRBound.getDocument()).setDocumentFilter(new MyDocumentFilter());
        
        getLeftRight();
        redefineTable();
        radioChanged();
    }//GEN-LAST:event_formWindowOpened

    /**
     * Exit
     */
    private void closeProgram(java.awt.AWTEvent evt) {
        int reply = JOptionPane.showConfirmDialog(this, "Are you really want to exit?", "Exit", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION)
            System.exit(0);
    }
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        closeProgram(evt);
    }//GEN-LAST:event_formWindowClosing

    private void btnInterpolateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInterpolateActionPerformed
        doInterpolate();
    }//GEN-LAST:event_btnInterpolateActionPerformed

    private void radioFunctionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioFunctionActionPerformed
        radioChanged();
    }//GEN-LAST:event_radioFunctionActionPerformed

    private void radioTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioTableActionPerformed
        radioChanged();
    }//GEN-LAST:event_radioTableActionPerformed

    private void btnTableFromFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTableFromFileActionPerformed
        loadCoefsFromFile();
    }//GEN-LAST:event_btnTableFromFileActionPerformed

    private void sliderDegreeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderDegreeStateChanged
        // The slider value is shown through binding of components editNodes and sliderNodes
        calcDistance();
        if (radioTable.isSelected()) {
            redefineTable();
            setColumnX();
        }
    }//GEN-LAST:event_sliderDegreeStateChanged

    private void editLBoundFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editLBoundFocusLost
        checkTextField(editLBound, left);
    }//GEN-LAST:event_editLBoundFocusLost

    private void editLBoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editLBoundActionPerformed
        checkTextField(editLBound, left);
    }//GEN-LAST:event_editLBoundActionPerformed

    private void editRBoundFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editRBoundFocusLost
        checkTextField(editRBound, right);
    }//GEN-LAST:event_editRBoundFocusLost

    private void editRBoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editRBoundActionPerformed
        checkTextField(editRBound, right);
    }//GEN-LAST:event_editRBoundActionPerformed

    // <editor-fold defaultstate="collapsed" desc="Variables declaration">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnInterpolate;
    private javax.swing.JButton btnTableFromFile;
    private javax.swing.ButtonGroup buttonSource;
    private javax.swing.JComboBox<String> comboFunction;
    private javax.swing.JTextField editLBound;
    private javax.swing.JTextField editNodes;
    private javax.swing.JTextField editRBound;
    private javax.swing.JFileChooser fileLoad;
    private javax.swing.JLabel labelLBound;
    private javax.swing.JLabel labelNodes;
    private javax.swing.JLabel labelRBound;
    private javax.swing.JLabel labelSource;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JPanel panelGraphic;
    private javax.swing.JPanel panelInfo;
    private javax.swing.JPanel panelSource;
    private javax.swing.JPanel panelTitle;
    private javax.swing.JRadioButton radioFunction;
    private javax.swing.JRadioButton radioTable;
    private javax.swing.JScrollPane scrollInfo;
    private javax.swing.JScrollPane scrollTable;
    private javax.swing.JSlider sliderDegree;
    private javax.swing.JTable tableNodes;
    private javax.swing.JTextArea textInfo;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>                        
    
}
